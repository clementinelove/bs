#lang racket
(require openssl/sha1)

(module+ test
  (require rackunit))

;; convert bytes into binary lists
(define (byte->8-bit-string byte)
  (let* ([bin-str (~r (string->number
                      (string-append "#x" (bytes->hex-string (bytes byte)))) #:base 2)]
        [original-len (string-length bin-str)])
    (for/fold ([fstr bin-str])
              ([i (- 8 original-len)])
      (string-append "0" fstr))))

(module+ test
  (check-equal? (byte->8-bit-string 1) "00000001")
  (check-equal? (byte->8-bit-string 10) "00001010")
  (check-equal? (byte->8-bit-string 128) "10000000"))

(define (bytes->integer bs signed? [big-endian? #t])
  (let ([8-bit-string-lst (map (Î» (b)
                                 (byte->8-bit-string b))
                               (bytes->list bs))])
    (reverse 8-bit-string-lst)))

(define (combine-8-bit-strings big-endian? . 8-bit-str-lst)
  (for/fold ([fstr ""])
            ([new-str (in-list (if big-endian? 8-bit-str-lst (reverse 8-bit-str-lst)))])
    (string-append new-str fstr)))

(module+ test
  )

(bytes->integer (bytes 1 12 128) #t)

